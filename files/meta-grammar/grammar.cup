/*
  JavaCup Specification for the JavaCup Specification Language
  by Scott Hudson, GVU Center, Georgia Tech, August 1995
  and Frank Flannery, Department of Computer Science, Princeton Univ,
  July 1996
  Bug Fixes: C. Scott Ananian, Dept of Electrical Engineering, Princeton
  University, October 1996. [later Massachusetts Institute of Technology]

  Modified by Martin Geisse to support an extended grammar but without embedded actions.
*/

package name.martingeisse.javapot.input;
import java_cup.runtime.*;
import java.util.Hashtable;
import java.util.Stack;

terminal QUESTION_MARK, SEMICOLON, COMMA, ASTERISK, DOT, BAR, PLUS,
	COLON, COLON_COLON_EQUALS, PERCENT_PREC,
	PACKAGE, CLASS, TERMINAL, NONTERMINAL, START, PRECEDENCE, LEFT, RIGHT, NONASSOC;
terminal String IDENTIFIER;

nonterminal grammar, symbolDefinitions, symbolDefinition, precedenceList, precedenceDeclaration,
	productionList, production, expression, hierarchicalIdentifier, nonemptyIdentifierList;

precedence left BAR;
precedence nonassoc QUESTION_MARK, ASTERISK, PLUS;

start with grammar;

grammar ::=
	PACKAGE hierarchicalIdentifier:packageName SEMICOLON
	CLASS IDENTIFIER:className SEMICOLON
	symbolDefinitions
	precedenceList
	START IDENTIFIER:startSymbolName SEMICOLON
	productionList
	|
	// error recovery assuming something went wrong before symbols and we have TERMINAL or NON TERMINAL to sync on.
	// If we get an error after that, we recover inside the symbol list or production list.
	error
	symbolDefinitions
	precedenceList
	START IDENTIFIER:startSymbolName SEMICOLON
	productionList
	;


//
// symbol definitions
//

symbolDefinitions ::=
	symbolDefinition
	| symbolDefinitions symbolDefinition
	;

symbolDefinition ::=
	TERMINAL nonemptyIdentifierList SEMICOLON
	| TERMINAL IDENTIFIER:type nonemptyIdentifierList SEMICOLON
	| NONTERMINAL nonemptyIdentifierList SEMICOLON
	| NONTERMINAL IDENTIFIER:type nonemptyIdentifierList SEMICOLON
	| TERMINAL error SEMICOLON
	| NONTERMINAL error SEMICOLON
	;


//
// precedence
//

precedenceList ::=
	// empty
 	| precedenceList precedenceDeclaration
 	;

precedenceDeclaration ::=
	PRECEDENCE LEFT nonemptyIdentifierList SEMICOLON
	| PRECEDENCE RIGHT nonemptyIdentifierList SEMICOLON
	| PRECEDENCE NONASSOC nonemptyIdentifierList SEMICOLON
	;


//
// productions
//

productionList ::=
	production
	| productionList production

	;

production ::=
	IDENTIFIER COLON_COLON_EQUALS expression SEMICOLON
	| error SEMICOLON
	;

expression ::=
	IDENTIFIER
	| IDENTIFIER COLON IDENTIFIER
	| expression IDENTIFIER
	| expression BAR expression
	| expression ASTERISK
	| expression PLUS
	| expression QUESTION_MARK
	;

//
// helpers
//

hierarchicalIdentifier ::=
	IDENTIFIER
	| hierarchicalIdentifier DOT IDENTIFIER
	;

nonemptyIdentifierList ::=
	IDENTIFIER
	| nonemptyIdentifierList COMMA IDENTIFIER
	;
