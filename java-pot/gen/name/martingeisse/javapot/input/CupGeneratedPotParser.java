
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package name.martingeisse.javapot.input;

import java_cup.runtime.*;
import java.util.Hashtable;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CupGeneratedPotParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return CupGeneratedPotTokenCodes.class;
}

  /** Default constructor. */
  @Deprecated
  public CupGeneratedPotParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CupGeneratedPotParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CupGeneratedPotParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\016\000\002\002" +
    "\011\000\002\003\003\000\002\003\004\000\002\004\005" +
    "\000\002\004\006\000\002\004\005\000\002\004\006\000" +
    "\002\004\005\000\002\004\005\000\002\005\002\000\002" +
    "\005\004\000\002\006\006\000\002\006\006\000\002\006" +
    "\006\000\002\007\003\000\002\007\004\000\002\010\006" +
    "\000\002\010\004\000\002\011\003\000\002\011\005\000" +
    "\002\011\004\000\002\011\005\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\012\003\000\002\012" +
    "\005\000\002\013\003\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\006\003\005\016\006\001\002\000\004\002" +
    "\114\001\002\000\006\020\017\021\021\001\002\000\004" +
    "\027\010\001\002\000\006\005\011\010\012\001\002\000" +
    "\006\005\uffe6\010\uffe6\001\002\000\004\017\014\001\002" +
    "\000\004\027\013\001\002\000\006\005\uffe5\010\uffe5\001" +
    "\002\000\004\027\015\001\002\000\004\005\016\001\002" +
    "\000\006\020\017\021\021\001\002\000\006\003\077\027" +
    "\100\001\002\000\012\020\ufffe\021\ufffe\022\ufffe\023\ufffe" +
    "\001\002\000\006\003\070\027\071\001\002\000\012\020" +
    "\017\021\021\022\ufff6\023\ufff6\001\002\000\006\022\027" +
    "\023\025\001\002\000\012\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\001\002\000\010\024\054\025\055\026\056\001\002" +
    "\000\006\022\ufff5\023\ufff5\001\002\000\004\027\030\001" +
    "\002\000\004\005\031\001\002\000\006\003\032\027\033" +
    "\001\002\000\004\005\053\001\002\000\004\014\037\001" +
    "\002\000\010\002\000\003\032\027\033\001\002\000\010" +
    "\002\ufff1\003\ufff1\027\ufff1\001\002\000\010\002\ufff0\003" +
    "\ufff0\027\ufff0\001\002\000\004\027\040\001\002\000\020" +
    "\004\uffed\005\uffed\007\uffed\011\uffed\012\uffed\013\051\027" +
    "\uffed\001\002\000\016\004\042\005\043\007\047\011\044" +
    "\012\045\027\046\001\002\000\016\004\uffe7\005\uffe7\007" +
    "\uffe7\011\uffe7\012\uffe7\027\uffe7\001\002\000\010\002\uffef" +
    "\003\uffef\027\uffef\001\002\000\004\027\040\001\002\000" +
    "\016\004\uffe8\005\uffe8\007\uffe8\011\uffe8\012\uffe8\027\uffe8" +
    "\001\002\000\016\004\uffeb\005\uffeb\007\uffeb\011\uffeb\012" +
    "\uffeb\027\uffeb\001\002\000\016\004\uffe9\005\uffe9\007\uffe9" +
    "\011\uffe9\012\uffe9\027\uffe9\001\002\000\016\004\042\005" +
    "\uffea\007\047\011\uffea\012\045\027\uffea\001\002\000\004" +
    "\027\052\001\002\000\016\004\uffec\005\uffec\007\uffec\011" +
    "\uffec\012\uffec\027\uffec\001\002\000\010\002\uffee\003\uffee" +
    "\027\uffee\001\002\000\004\027\057\001\002\000\004\027" +
    "\057\001\002\000\004\027\057\001\002\000\006\005\uffe4" +
    "\006\uffe4\001\002\000\006\005\062\006\061\001\002\000" +
    "\004\027\063\001\002\000\006\022\ufff2\023\ufff2\001\002" +
    "\000\006\005\uffe3\006\uffe3\001\002\000\006\005\065\006" +
    "\061\001\002\000\006\022\ufff3\023\ufff3\001\002\000\006" +
    "\005\067\006\061\001\002\000\006\022\ufff4\023\ufff4\001" +
    "\002\000\004\005\076\001\002\000\010\005\uffe4\006\uffe4" +
    "\027\057\001\002\000\006\005\073\006\061\001\002\000" +
    "\012\020\ufffa\021\ufffa\022\ufffa\023\ufffa\001\002\000\006" +
    "\005\075\006\061\001\002\000\012\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\001\002\000\012\020\ufff7\021\ufff7\022\ufff7" +
    "\023\ufff7\001\002\000\004\005\105\001\002\000\010\005" +
    "\uffe4\006\uffe4\027\057\001\002\000\006\005\102\006\061" +
    "\001\002\000\012\020\ufffc\021\ufffc\022\ufffc\023\ufffc\001" +
    "\002\000\006\005\104\006\061\001\002\000\012\020\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\001\002\000\012\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\001\002\000\012\020\017\021\021" +
    "\022\ufff6\023\ufff6\001\002\000\006\022\110\023\025\001" +
    "\002\000\004\027\111\001\002\000\004\005\112\001\002" +
    "\000\006\003\032\027\033\001\002\000\010\002\uffff\003" +
    "\032\027\033\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\105\004\017\001\001\000\004\012\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\021\004\017\001\001\000\004\013" +
    "\100\001\001\000\002\001\001\000\004\013\071\001\001" +
    "\000\006\004\023\005\022\001\001\000\004\006\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\033\010" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\065\001\001\000\004\013\063" +
    "\001\001\000\004\013\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\023\005\106\001\001\000\004\006\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\112" +
    "\010\034\001\001\000\004\010\035\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CupGeneratedPotParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CupGeneratedPotParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CupGeneratedPotParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CupGeneratedPotParser$actions {
  private final CupGeneratedPotParser parser;

  /** Constructor */
  CUP$CupGeneratedPotParser$actions(CupGeneratedPotParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CupGeneratedPotParser$do_action_part00000000(
    int                        CUP$CupGeneratedPotParser$act_num,
    java_cup.runtime.lr_parser CUP$CupGeneratedPotParser$parser,
    java.util.Stack            CUP$CupGeneratedPotParser$stack,
    int                        CUP$CupGeneratedPotParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CupGeneratedPotParser$result;

      /* select the action based on the action number */
      switch (CUP$CupGeneratedPotParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= grammar EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-1)).value;
		RESULT = start_val;
              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CupGeneratedPotParser$parser.done_parsing();
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // grammar ::= PACKAGE hierarchicalIdentifier SEMICOLON CLASS IDENTIFIER SEMICOLON symbolDefinitions precedenceList START IDENTIFIER SEMICOLON productionList 
            {
              Object RESULT =null;
		int packageNameleft = ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-10)).left;
		int packageNameright = ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-10)).right;
		Object packageName = (Object)((java_cup.runtime.Symbol) CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-10)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-7)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-7)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-7)).value;
		int startSymbolNameleft = ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)).left;
		int startSymbolNameright = ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)).right;
		String startSymbolName = (String)((java_cup.runtime.Symbol) CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)).value;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("grammar",0, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-11)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // grammar ::= error symbolDefinitions precedenceList START IDENTIFIER SEMICOLON productionList 
            {
              Object RESULT =null;
		int startSymbolNameleft = ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)).left;
		int startSymbolNameright = ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)).right;
		String startSymbolName = (String)((java_cup.runtime.Symbol) CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)).value;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("grammar",0, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-6)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // symbolDefinitions ::= symbolDefinition 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("symbolDefinitions",1, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // symbolDefinitions ::= symbolDefinitions symbolDefinition 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("symbolDefinitions",1, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // symbolDefinition ::= TERMINAL nonemptyIdentifierList SEMICOLON 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("symbolDefinition",2, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // symbolDefinition ::= TERMINAL IDENTIFIER nonemptyIdentifierList SEMICOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)).value;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("symbolDefinition",2, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // symbolDefinition ::= NONTERMINAL nonemptyIdentifierList SEMICOLON 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("symbolDefinition",2, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // symbolDefinition ::= NONTERMINAL IDENTIFIER nonemptyIdentifierList SEMICOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)).value;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("symbolDefinition",2, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // symbolDefinition ::= TERMINAL error SEMICOLON 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("symbolDefinition",2, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // symbolDefinition ::= NONTERMINAL error SEMICOLON 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("symbolDefinition",2, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // precedenceList ::= 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("precedenceList",3, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // precedenceList ::= precedenceList precedenceDeclaration 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("precedenceList",3, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // precedenceDeclaration ::= PRECEDENCE LEFT nonemptyIdentifierList SEMICOLON 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("precedenceDeclaration",4, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // precedenceDeclaration ::= PRECEDENCE RIGHT nonemptyIdentifierList SEMICOLON 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("precedenceDeclaration",4, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // precedenceDeclaration ::= PRECEDENCE NONASSOC nonemptyIdentifierList SEMICOLON 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("precedenceDeclaration",4, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // productionList ::= production 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("productionList",5, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // productionList ::= productionList production 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("productionList",5, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // production ::= IDENTIFIER COLON_COLON_EQUALS expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("production",6, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // production ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("production",6, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= IDENTIFIER COLON IDENTIFIER 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= expression IDENTIFIER 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= expression BAR expression 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= expression ASTERISK 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= expression PLUS 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression QUESTION_MARK 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // hierarchicalIdentifier ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("hierarchicalIdentifier",8, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // hierarchicalIdentifier ::= hierarchicalIdentifier DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("hierarchicalIdentifier",8, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // nonemptyIdentifierList ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("nonemptyIdentifierList",9, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // nonemptyIdentifierList ::= nonemptyIdentifierList COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$CupGeneratedPotParser$result = parser.getSymbolFactory().newSymbol("nonemptyIdentifierList",9, ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.elementAt(CUP$CupGeneratedPotParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupGeneratedPotParser$stack.peek()), RESULT);
            }
          return CUP$CupGeneratedPotParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CupGeneratedPotParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CupGeneratedPotParser$do_action(
    int                        CUP$CupGeneratedPotParser$act_num,
    java_cup.runtime.lr_parser CUP$CupGeneratedPotParser$parser,
    java.util.Stack            CUP$CupGeneratedPotParser$stack,
    int                        CUP$CupGeneratedPotParser$top)
    throws java.lang.Exception
    {
              return CUP$CupGeneratedPotParser$do_action_part00000000(
                               CUP$CupGeneratedPotParser$act_num,
                               CUP$CupGeneratedPotParser$parser,
                               CUP$CupGeneratedPotParser$stack,
                               CUP$CupGeneratedPotParser$top);
    }
}

}
